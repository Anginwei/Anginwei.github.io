// 修复浮动引起的塌陷
.clearfix() {
    &:before,
    &:after {
      content: " ";
      display: table;
    }
    &:after {
      clear: both;
    }
    zoom: 1;
}
.clearfix {
    .clearfix();
}

// 图标
.icon-font() {
    font-family: "FontAwesome";
}
.icon-font {
    .icon-font();
}

// 水平居中
.center-block() {
    display: block;
    margin-left: auto;
    margin-right: auto;
}
.center-blcok {
    .center-block();
}

// 垂直居中
.middle-block(@height) {
    position: absolute;
    top: 50%;
    margin-top: -@height / 2;
}

// 水平垂直居中
.absolute-center(@width, @height) {
    position: absolute;
    top: 50%;
    left: 50%;
    margin-left: -@width / 2;
    margin-top: -@height / 2;
}

// 文字溢出
.text-overflow() {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}
.text-overflow {
    .text-overflow();
}


// 盒模型计算
.box-sizing(@type) {
    box-sizing: @type;
    -webkit-box-sizing: @type;
    -moz-box-sizing: @type;
}

// 常用尺寸
.mt10 {
    margin-top: 10px;
}
.mb10 {
    margin-bottom: 10px;
}
.ml10 {
    margin-left: 10px;
}
.mr10 {
    margin-right: 10px;
}
.mt15 {
    margin-top: 15px;
}
.mb15 {
    margin-bottom: 15px;
}
.ml15 {
    margin-left: 15px;
}
.mr15 {
    margin-right: 15px;
}
.mt20 {
    margin-top: 20px;
}
.mb20 {
    margin-bottom: 20px;
}
.ml20 {
    margin-left: 20px;
}
.mr20 {
    margin-right: 20px;
}
.pt10 {
    padding-top: 10px;
}
.pb10 {
    padding-bottom: 10px;
}
.pl10 {
    padding-left: 10px;
}
.pr10 {
    padding-right: 10px;
}
.pt15 {
    padding-top: 15px;
}
.pb15 {
    padding-bottom: 15px;
}
.pl15 {
    padding-left: 15px;
}
.pr15 {
    padding-right: 15px;
}
.pt20 {
    padding-top: 20px;
}
.pb20 {
    padding-bottom: 20px;
}
.pl20 {
    padding-left: 20px;
}
.pr20 {
    padding-right: 20px;
}
// ==mtb
.mtb(@size) {
    margin-top: @size;
    margin-bottom: @size;
}
.mtb10 {
    .mtb(10px);
}
.mtb15 {
    .mtb(15px);
}
.mtb20 {
    .mtb(20px);
}
// ==mlr
.mlr(@size) {
    margin-left: @size;
    margin-right: @size;
}
.mlr10 {
    .mlr(10px);
}
.mlr15 {
    .mlr(15px);
}
.mlr20 {
    .mlr(20px);
}
// ==ptb
.ptb(@size) {
    padding-top: @size;
    padding-bottom: @size;
}
.ptb10 {
    .ptb(10px);
}
.ptb15 {
    .ptb(15px);
}
.ptb20 {
    .ptb(20px);
}
// ==plr
.plr(@size) {
    padding-left: @size;
    padding-right: @size;
}
.plr10 {
    .plr(10px);
}
.plr15 {
    .plr(15px);
}
.plr20 {
    .plr(20px);
}

// 尺寸
.size(@width; @height) {
    width: @width;
    height: @height;
}

// 圆角
.border-radius-top(@size: 5px) {
    border-top-left-radius: @size;
    border-top-right-radius: @size;
}
.border-radius-bottom(@size: 5px) {
    border-bottom-left-radius: @size;
    border-bottom-right-radius: @size;
}
.border-radius-left(@size: 5px) {
    border-top-left-radius: @size;
    border-bottom-left-radius: @size;
}
.border-radius-right(@size: 5px) {
    border-top-right-radius: @size;
    border-bottom-right-radius: @size;
}

// 过渡
.transition(@property: all, @duration: .3s, @time-function: ease, @delay: 0s) {
    -webkit-transition: @arguments;
    -moz-transition: @arguments;
    transition: @arguments;
}

// 透明
.opacity(@opacity) {
    opacity: @opacity;
    @opacity-ie: (@opacity * 100);
    filter: ~"alpha(opacity=@{opacity-ie})";
}

// 变换
.transform(@value) {
    -ms-transform: @arguments;
    -moz-transform: @arguments;
    -webkit-transform: @arguments;
    transform: @arguments;
}
.transform-orgin(@x: 50%, @y: 50%, @z: 0) {
    -ms-transform-origin: @arguments;
    -moz-transform-origin: @arguments;
    -webkit-transform-origin: @arguments;
    transform-origin: @arguments;
}

// 动画
.animation(@name, @duration) {
    -webkit-animation: @arguments;
    animation: @arguments;
}
.animation-timing-function(@type: ease) {
    -webkit-animation-timing-function: @type;
    animation-timing-function: @type;
}
.anmation-delay(@value: 0) {
    -webkit-animation-delay: @value;
    animation-delay: @value;
}
.animation-iteration-count(@value: 1) {
    -webkit-animation-iteration-count: @value;
    animation-iteration-count: @value;
}
.animation-direction(@value: alternate) {
    -webkit-animation-direction: @value;
    animation-direction: @value;
}

// 渐变
#gradient {
    .horizontal(@start-color: #555; @end-color: #333; @start-percent: 0%; @end-percent: 100%) {
      background-image: -webkit-linear-gradient(left, @start-color @start-percent, @end-color @end-percent); // Safari 5.1-6, Chrome 10+
      background-image: -o-linear-gradient(left, @start-color @start-percent, @end-color @end-percent); // Opera 12
      background-image: linear-gradient(to right, @start-color @start-percent, @end-color @end-percent); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
      background-repeat: repeat-x;
      filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=1)",argb(@start-color),argb(@end-color))); // IE9 and down
    }

    .vertical(@start-color: #555; @end-color: #333; @start-percent: 0%; @end-percent: 100%) {
      background-image: -webkit-linear-gradient(top, @start-color @start-percent, @end-color @end-percent);  // Safari 5.1-6, Chrome 10+
      background-image: -o-linear-gradient(top, @start-color @start-percent, @end-color @end-percent);  // Opera 12
      background-image: linear-gradient(to bottom, @start-color @start-percent, @end-color @end-percent); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
      background-repeat: repeat-x;
      filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",argb(@start-color),argb(@end-color))); // IE9 and down
    }

    .directional(@start-color: #555; @end-color: #333; @deg: 45deg) {
      background-repeat: repeat-x;
      background-image: -webkit-linear-gradient(@deg, @start-color, @end-color); // Safari 5.1-6, Chrome 10+
      background-image: -o-linear-gradient(@deg, @start-color, @end-color); // Opera 12
      background-image: linear-gradient(@deg, @start-color, @end-color); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
    }
    .horizontal-three-colors(@start-color: #00b3ee; @mid-color: #7a43b6; @color-stop: 50%; @end-color: #c3325f) {
      background-image: -webkit-linear-gradient(left, @start-color, @mid-color @color-stop, @end-color);
      background-image: -o-linear-gradient(left, @start-color, @mid-color @color-stop, @end-color);
      background-image: linear-gradient(to right, @start-color, @mid-color @color-stop, @end-color);
      background-repeat: no-repeat;
      filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=1)",argb(@start-color),argb(@end-color))); // IE9 and down, gets no color-stop at all for proper fallback
    }
    .vertical-three-colors(@start-color: #00b3ee; @mid-color: #7a43b6; @color-stop: 50%; @end-color: #c3325f) {
      background-image: -webkit-linear-gradient(@start-color, @mid-color @color-stop, @end-color);
      background-image: -o-linear-gradient(@start-color, @mid-color @color-stop, @end-color);
      background-image: linear-gradient(@start-color, @mid-color @color-stop, @end-color);
      background-repeat: no-repeat;
      filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",argb(@start-color),argb(@end-color))); // IE9 and down, gets no color-stop at all for proper fallback
    }
    .radial(@inner-color: #555; @outer-color: #333) {
      background-image: -webkit-radial-gradient(circle, @inner-color, @outer-color);
      background-image: radial-gradient(circle, @inner-color, @outer-color);
      background-repeat: no-repeat;
    }
    .striped(@color: rgba(255,255,255,.15); @angle: 45deg) {
      background-image: -webkit-linear-gradient(@angle, @color 25%, transparent 25%, transparent 50%, @color 50%, @color 75%, transparent 75%, transparent);
      background-image: -o-linear-gradient(@angle, @color 25%, transparent 25%, transparent 50%, @color 50%, @color 75%, transparent 75%, transparent);
      background-image: linear-gradient(@angle, @color 25%, transparent 25%, transparent 50%, @color 50%, @color 75%, transparent 75%, transparent);
    }
}

// 栅格
.container-fixed(@gutter: @grid-gutter-width) {
    margin-right: auto;
    margin-left: auto;
    padding-left:    (@gutter / 2);
    padding-right: (@gutter / 2);
    &:extend(.clearfix all);
}

.make-row(@gutter: @grid-gutter-width) {
    margin-left:    ceil((@gutter / -2));
    margin-right: floor((@gutter / -2));
    &:extend(.clearfix all);
}

.make-xs-column(@columns; @gutter: @grid-gutter-width) {
    position: relative;
    float: left;
    width: percentage((@columns / @grid-columns));
    min-height: 1px;
    padding-left:    (@gutter / 2);
    padding-right: (@gutter / 2);
}
.make-xs-column-offset(@columns) {
    margin-left: percentage((@columns / @grid-columns));
}
.make-xs-column-push(@columns) {
    left: percentage((@columns / @grid-columns));
}
.make-xs-column-pull(@columns) {
    right: percentage((@columns / @grid-columns));
}

.make-sm-column(@columns; @gutter: @grid-gutter-width) {
    position: relative;
    min-height: 1px;
    padding-left:    (@gutter / 2);
    padding-right: (@gutter / 2);

    @media (min-width: @screen-sm-min) {
        float: left;
        width: percentage((@columns / @grid-columns));
    }
}
.make-sm-column-offset(@columns) {
    @media (min-width: @screen-sm-min) {
        margin-left: percentage((@columns / @grid-columns));
    }
}
.make-sm-column-push(@columns) {
    @media (min-width: @screen-sm-min) {
        left: percentage((@columns / @grid-columns));
    }
}
.make-sm-column-pull(@columns) {
    @media (min-width: @screen-sm-min) {
        right: percentage((@columns / @grid-columns));
    }
}

.make-md-column(@columns; @gutter: @grid-gutter-width) {
    position: relative;
    min-height: 1px;
    padding-left:    (@gutter / 2);
    padding-right: (@gutter / 2);

    @media (min-width: @screen-md-min) {
        float: left;
        width: percentage((@columns / @grid-columns));
    }
}
.make-md-column-offset(@columns) {
    @media (min-width: @screen-md-min) {
        margin-left: percentage((@columns / @grid-columns));
    }
}
.make-md-column-push(@columns) {
    @media (min-width: @screen-md-min) {
        left: percentage((@columns / @grid-columns));
    }
}
.make-md-column-pull(@columns) {
    @media (min-width: @screen-md-min) {
        right: percentage((@columns / @grid-columns));
    }
}

.make-lg-column(@columns; @gutter: @grid-gutter-width) {
    position: relative;
    min-height: 1px;
    padding-left:    (@gutter / 2);
    padding-right: (@gutter / 2);

    @media (min-width: @screen-lg-min) {
        float: left;
        width: percentage((@columns / @grid-columns));
    }
}
.make-lg-column-offset(@columns) {
    @media (min-width: @screen-lg-min) {
        margin-left: percentage((@columns / @grid-columns));
    }
}
.make-lg-column-push(@columns) {
    @media (min-width: @screen-lg-min) {
        left: percentage((@columns / @grid-columns));
    }
}
.make-lg-column-pull(@columns) {
    @media (min-width: @screen-lg-min) {
        right: percentage((@columns / @grid-columns));
    }
}

// 栅格框架
.make-grid-columns() {
    .col(@index) { // initial
        @item: ~".col-xs-@{index}, .col-sm-@{index}, .col-md-@{index}, .col-lg-@{index}";
        .col((@index + 1), @item);
    }
    .col(@index, @list) when (@index =< @grid-columns) { // general; "=<" isn't a typo
        @item: ~".col-xs-@{index}, .col-sm-@{index}, .col-md-@{index}, .col-lg-@{index}";
        .col((@index + 1), ~"@{list}, @{item}");
    }
    .col(@index, @list) when (@index > @grid-columns) { // terminal
        @{list} {
            position: relative;
            min-height: 1px;
            padding-left:    ceil((@grid-gutter-width / 2));
            padding-right: floor((@grid-gutter-width / 2));
        }
    }
    .col(1); // kickstart it
}

.float-grid-columns(@class) {
    .col(@index) { // initial
        @item: ~".col-@{class}-@{index}";
        .col((@index + 1), @item);
    }
    .col(@index, @list) when (@index =< @grid-columns) { // general
        @item: ~".col-@{class}-@{index}";
        .col((@index + 1), ~"@{list}, @{item}");
    }
    .col(@index, @list) when (@index > @grid-columns) { // terminal
        @{list} {
            float: left;
        }
    }
    .col(1); // kickstart it
}

.calc-grid-column(@index, @class, @type) when (@type = width) and (@index > 0) {
    .col-@{class}-@{index} {
        width: percentage((@index / @grid-columns));
    }
}
.calc-grid-column(@index, @class, @type) when (@type = push) and (@index > 0) {
    .col-@{class}-push-@{index} {
        left: percentage((@index / @grid-columns));
    }
}
.calc-grid-column(@index, @class, @type) when (@type = push) and (@index = 0) {
    .col-@{class}-push-0 {
        left: auto;
    }
}
.calc-grid-column(@index, @class, @type) when (@type = pull) and (@index > 0) {
    .col-@{class}-pull-@{index} {
        right: percentage((@index / @grid-columns));
    }
}
.calc-grid-column(@index, @class, @type) when (@type = pull) and (@index = 0) {
    .col-@{class}-pull-0 {
        right: auto;
    }
}
.calc-grid-column(@index, @class, @type) when (@type = offset) {
    .col-@{class}-offset-@{index} {
        margin-left: percentage((@index / @grid-columns));
    }
}

.loop-grid-columns(@index, @class, @type) when (@index >= 0) {
    .calc-grid-column(@index, @class, @type);
    .loop-grid-columns((@index - 1), @class, @type);
}

.make-grid(@class) {
    .float-grid-columns(@class);
    .loop-grid-columns(@grid-columns, @class, width);
    .loop-grid-columns(@grid-columns, @class, pull);
    .loop-grid-columns(@grid-columns, @class, push);
    .loop-grid-columns(@grid-columns, @class, offset);
}